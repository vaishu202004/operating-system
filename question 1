#include <stdio.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int main()
{
    int i, j, k;
    int available[NUM_RESOURCES] = {9, 3, 6};
    int max[NUM_PROCESSES][NUM_RESOURCES] =  {3, 2,1},{6, 1, 3},{3, 1, 4},{4, 2, 2}};
    int allocation[NUM_PROCESSES][NUM_RESOURCES] ={1, 0, 0},{6, 1, 2},{2, 1, 1},{0, 0, 2} };
    int need[NUM_PROCESSES][NUM_RESOURCES];
    int finish[NUM_PROCESSES] = {0};
    int safe_sequence[NUM_PROCESSES];
    int work[NUM_RESOURCES];
    for (i = 0; i < NUM_PROCESSES; i++) 
    {
        for (j = 0; j < NUM_RESOURCES; j++)
        {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
    for (i = 0; i < NUM_RESOURCES; i++)
    {
        work[i] = available[i];
    }
    int num_finished = 0;
    while (num_finished < NUM_PROCESSES) 
    {
        int found = 0;
        for (i = 0; i < NUM_PROCESSES; i++)
        {
            if (!finish[i]) 
            {
                int can_run = 1;
                for (j = 0; j < NUM_RESOURCES; j++)
                {
                    if (need[i][j] > work[j])
                    {
                        can_run = 0;
                        break;
                    }
                }
                if (can_run)
                {
                    for (j = 0; j < NUM_RESOURCES; j++) 
                    {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    safe_sequence[num_finished] = i;
                    num_finished++;
                    found = 1;
                }
            }
        }
        if (!found) 
        {
            printf("Unsafe state\n");
            return 0;
        }
    }
    printf("Safe state, sequence:");
    for (i = 0; i < NUM_PROCESSES; i++) 
    {
        printf(" %d", safe_sequence[i]);
    }
    printf("\n");

    return 0;
}
